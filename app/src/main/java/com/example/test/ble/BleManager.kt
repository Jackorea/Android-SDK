package com.example.test.ble

import android.annotation.SuppressLint
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothGatt
import android.bluetooth.BluetoothGattCallback
import android.bluetooth.BluetoothGattCharacteristic
import android.bluetooth.BluetoothGattDescriptor
import android.bluetooth.BluetoothManager
import android.bluetooth.le.BluetoothLeScanner
import android.bluetooth.le.ScanCallback
import android.bluetooth.le.ScanResult
import android.content.Context
import android.os.Handler
import android.os.Looper
import android.util.Log
import com.example.test.data.AccData
import com.example.test.data.BatteryData
import com.example.test.data.EegData
import com.example.test.data.PpgData
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import java.util.UUID

@SuppressLint("MissingPermission")
class BleManager(private val context: Context) {
    
    // UUID ÏÉÅÏàòÎì§ (ÌååÏù¥Ïç¨ ÏΩîÎìúÏóêÏÑú Ï∂îÏ∂ú)
    companion object {
        val ACCELEROMETER_SERVICE_UUID = UUID.fromString("75c276c3-8f97-20bc-a143-b354244886d4")
        val ACCELEROMETER_CHAR_UUID = UUID.fromString("d3d46a35-4394-e9aa-5a43-e7921120aaed")
        
        val EEG_NOTIFY_SERVICE_UUID = UUID.fromString("df7b5d95-3afe-00a1-084c-b50895ef4f95")
        val EEG_NOTIFY_CHAR_UUID = UUID.fromString("00ab4d15-66b4-0d8a-824f-8d6f8966c6e5")
        val EEG_WRITE_CHAR_UUID = UUID.fromString("0065cacb-9e52-21bf-a849-99a80d83830e")
        
        val PPG_SERVICE_UUID = UUID.fromString("1cc50ec0-6967-9d84-a243-c2267f924d1f")
        val PPG_CHAR_UUID = UUID.fromString("6c739642-23ba-818b-2045-bfe8970263f6")
        
        val BATTERY_SERVICE_UUID = UUID.fromString("0000180f-0000-1000-8000-00805f9b34fb")
        val BATTERY_CHAR_UUID = UUID.fromString("00002a19-0000-1000-8000-00805f9b34fb")
        
        const val EEG_SAMPLE_RATE = 250
        const val PPG_SAMPLE_RATE = 50
        const val ACC_SAMPLE_RATE = 30
    }
    
    private val bluetoothManager = context.getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
    private val bluetoothAdapter = bluetoothManager.adapter
    private val bluetoothLeScanner: BluetoothLeScanner = bluetoothAdapter.bluetoothLeScanner
    private val handler = Handler(Looper.getMainLooper())
    
    private var bluetoothGatt: BluetoothGatt? = null
    
    private val _scannedDevices = MutableStateFlow<List<BluetoothDevice>>(emptyList())
    val scannedDevices: StateFlow<List<BluetoothDevice>> = _scannedDevices.asStateFlow()
    
    private val _isScanning = MutableStateFlow(false)
    val isScanning: StateFlow<Boolean> = _isScanning.asStateFlow()
    
    private val _isConnected = MutableStateFlow(false)
    val isConnected: StateFlow<Boolean> = _isConnected.asStateFlow()
    
    private val _eegData = MutableStateFlow<List<EegData>>(emptyList())
    val eegData: StateFlow<List<EegData>> = _eegData.asStateFlow()
    
    private val _ppgData = MutableStateFlow<List<PpgData>>(emptyList())
    val ppgData: StateFlow<List<PpgData>> = _ppgData.asStateFlow()
    
    private val _accData = MutableStateFlow<List<AccData>>(emptyList())
    val accData: StateFlow<List<AccData>> = _accData.asStateFlow()
    
    private val _batteryData = MutableStateFlow<BatteryData?>(null)
    val batteryData: StateFlow<BatteryData?> = _batteryData.asStateFlow()
    
    private val _isEegStarted = MutableStateFlow(false)
    val isEegStarted: StateFlow<Boolean> = _isEegStarted.asStateFlow()
    
    private val _isPpgStarted = MutableStateFlow(false) 
    val isPpgStarted: StateFlow<Boolean> = _isPpgStarted.asStateFlow()
    
    private val _isAccStarted = MutableStateFlow(false)
    val isAccStarted: StateFlow<Boolean> = _isAccStarted.asStateFlow()
    
    // ÏûêÎèôÏó∞Í≤∞ Í¥ÄÎ†® StateFlow Ï∂îÍ∞Ä
    private val _isAutoReconnectEnabled = MutableStateFlow(false)
    val isAutoReconnectEnabled: StateFlow<Boolean> = _isAutoReconnectEnabled.asStateFlow()
    
    // ÎßàÏßÄÎßâ Ïó∞Í≤∞Îêú ÎîîÎ∞îÏù¥Ïä§ Ï†ïÎ≥¥ Ï†ÄÏû•
    private var lastConnectedDevice: BluetoothDevice? = null
    private var reconnectAttempts = 0
    private val maxReconnectAttempts = 5
    private var reconnectRunnable: Runnable? = null
    
    private val scanCallback = object : ScanCallback() {
        override fun onScanResult(callbackType: Int, result: ScanResult) {
            val device = result.device
            val deviceName = device.name ?: return
            
            // "LXB-"Î°ú ÏãúÏûëÌïòÎäî ÎîîÎ∞îÏù¥Ïä§Îßå ÌïÑÌÑ∞ÎßÅ
            if (deviceName.startsWith("LXB-")) {
                val currentDevices = _scannedDevices.value.toMutableList()
                if (!currentDevices.any { it.address == device.address }) {
                    currentDevices.add(device)
                    _scannedDevices.value = currentDevices
                }
            }
        }
    }
    
    private val gattCallback = object : BluetoothGattCallback() {
        override fun onConnectionStateChange(gatt: BluetoothGatt, status: Int, newState: Int) {
            when (newState) {
                BluetoothGatt.STATE_CONNECTED -> {
                    _isConnected.value = true
                    // Ïó∞Í≤∞ ÏÑ±Í≥µ Ïãú Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ ÌöüÏàò Î¶¨ÏÖã
                    reconnectAttempts = 0
                    // ÌòÑÏû¨ Ïó∞Í≤∞Îêú ÎîîÎ∞îÏù¥Ïä§Î•º ÎßàÏßÄÎßâ Ïó∞Í≤∞ ÎîîÎ∞îÏù¥Ïä§Î°ú Ï†ÄÏû•
                    lastConnectedDevice = gatt.device
                    Log.d("BleManager", "Connected to device: ${gatt.device.name}")
                    // Ïó∞Í≤∞ ÏôÑÎ£å ÌõÑ MTU ÏÑ§Ï†ï
                    Log.d("BleManager", "Requesting MTU: 247")
                    gatt.requestMtu(247)
                }
                BluetoothGatt.STATE_DISCONNECTED -> {
                    _isConnected.value = false
                    // Ïó∞Í≤∞ Ìï¥Ï†ú Ïãú Î™®Îì† ÏÑºÏÑú ÏÉÅÌÉú Î¶¨ÏÖã
                    _isEegStarted.value = false
                    _isPpgStarted.value = false
                    _isAccStarted.value = false
                    Log.d("BleManager", "Connection disconnected - all sensor states reset")
                    bluetoothGatt = null
                    
                    // ÏûêÎèôÏó∞Í≤∞Ïù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÍ≥† ÎßàÏßÄÎßâ Ïó∞Í≤∞ ÎîîÎ∞îÏù¥Ïä§Í∞Ä ÏûàÏúºÎ©¥ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ
                    if (_isAutoReconnectEnabled.value && lastConnectedDevice != null) {
                        attemptAutoReconnect()
                    }
                }
            }
        }
        
        override fun onMtuChanged(gatt: BluetoothGatt, mtu: Int, status: Int) {
            Log.d("BleManager", "MTU changed to: $mtu, status: $status")
            if (status == BluetoothGatt.GATT_SUCCESS) {
                Log.d("BleManager", "MTU successfully set to: $mtu")
            } else {
                Log.w("BleManager", "MTU change failed with status: $status")
            }
            // MTU ÏÑ§Ï†ï ÏôÑÎ£å ÌõÑ ÏÑúÎπÑÏä§ Î∞úÍ≤¨ ÏãúÏûë
            handler.postDelayed({
                gatt.discoverServices()
            }, 1000)
        }
        
        override fun onServicesDiscovered(gatt: BluetoothGatt, status: Int) {
            Log.d("BleManager", "Services discovered, status: $status")
            if (status == BluetoothGatt.GATT_SUCCESS) {
                val services = gatt.services
                Log.d("BleManager", "Found ${services.size} services")
                for (service in services) {
                    Log.d("BleManager", "Service UUID: ${service.uuid}")
                }
                // ÏÑúÎπÑÏä§ Î∞úÍ≤¨ ÌõÑ notification ÏÑ§Ï†ï Ï†Ñ ÎîúÎ†àÏù¥
                handler.postDelayed({
                    startNotifications(gatt)
                }, 500)
            } else {
                Log.e("BleManager", "Service discovery failed with status: $status")
            }
        }
        
        override fun onCharacteristicChanged(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic) {
            val data = characteristic.value //Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Í∞êÏßÄ
            Log.d("BleManager", "=== Data received from ${characteristic.uuid}, size: ${data?.size ?: 0} ===")
            
            // PPG Îç∞Ïù¥ÌÑ∞Ïù∏ÏßÄ ÌäπÎ≥ÑÌûà ÌôïÏù∏
            if (characteristic.uuid == PPG_CHAR_UUID) {
                Log.d("BleManager", "üî¥ PPG Îç∞Ïù¥ÌÑ∞ ÏàòÏã†! ÌÅ¨Í∏∞: ${data?.size ?: 0}")
            }
            
            if (data != null && data.isNotEmpty()) {
                // Îç∞Ïù¥ÌÑ∞Î•º hexÎ°ú Ï∂úÎ†•
                val hexString = data.joinToString(" ") { "%02x".format(it) }
                Log.d("BleManager", "Raw data: $hexString")
                
                when (characteristic.uuid) {
                    EEG_NOTIFY_CHAR_UUID -> {
                        Log.d("BleManager", "Processing EEG data: ${data.size} bytes")
                        parseEegData(data)
                    }
                    PPG_CHAR_UUID -> {
                        Log.d("BleManager", "üî¥ Processing PPG data: ${data.size} bytes")
                        parsePpgData(data)
                    }
                    ACCELEROMETER_CHAR_UUID -> {
                        Log.d("BleManager", "Processing ACC data: ${data.size} bytes")
                        parseAccData(data)
                    }
                    BATTERY_CHAR_UUID -> {
                        Log.d("BleManager", "Processing Battery data: ${data.size} bytes")
                        parseBatteryData(data)
                    }
                    else -> {
                        Log.w("BleManager", "Unknown characteristic UUID: ${characteristic.uuid}")
                    }
                }
            } else {
                Log.w("BleManager", "Received null or empty data from ${characteristic.uuid}")
            }
        }
        
        override fun onCharacteristicRead(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic, status: Int) {
            Log.d("BleManager", "Characteristic read: ${characteristic.uuid}, status: $status")
            if (status == BluetoothGatt.GATT_SUCCESS) {
                val data = characteristic.value
                if (data != null && characteristic.uuid == BATTERY_CHAR_UUID) {
                    parseBatteryData(data)
                }
            }
        }
        
        override fun onCharacteristicWrite(gatt: BluetoothGatt, characteristic: BluetoothGattCharacteristic, status: Int) {
            Log.d("BleManager", "Characteristic write: ${characteristic.uuid}, status: $status")
            // EEG write Î™ÖÎ†π ÏôÑÎ£å Î°úÍ∑∏Îßå ÎÇ®Í∏∞Í≥† ÏûêÎèô notification ÏÑ§Ï†ï Ï†úÍ±∞
            if (characteristic.uuid == EEG_WRITE_CHAR_UUID && status == BluetoothGatt.GATT_SUCCESS) {
                Log.d("BleManager", "EEG start/stop command sent successfully")
            }
        }
        
        override fun onDescriptorWrite(gatt: BluetoothGatt, descriptor: BluetoothGattDescriptor, status: Int) {
            Log.d("BleManager", "Descriptor write: ${descriptor.uuid}, status: $status")
            // Descriptor Ïì∞Í∏∞ ÏôÑÎ£å Ï≤òÎ¶¨
        }
    }
    
    fun startScan() {
        if (!_isScanning.value) {
            _scannedDevices.value = emptyList()
            _isScanning.value = true
            bluetoothLeScanner.startScan(scanCallback)
        }
    }
    
    fun stopScan() {
        if (_isScanning.value) {
            _isScanning.value = false
            bluetoothLeScanner.stopScan(scanCallback)
        }
    }
    
    fun connectToDevice(device: BluetoothDevice) {
        stopScan()
        bluetoothGatt = device.connectGatt(context, false, gattCallback)
    }
    
    // ÏûêÎèôÏó∞Í≤∞ Ï†úÏñ¥ Ìï®ÏàòÎì§
    fun enableAutoReconnect() {
        _isAutoReconnectEnabled.value = true
        Log.d("BleManager", "Auto-reconnect enabled")
    }
    
    fun disableAutoReconnect() {
        _isAutoReconnectEnabled.value = false
        // ÏßÑÌñâ Ï§ëÏù∏ Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ Ï∑®ÏÜå
        reconnectRunnable?.let { handler.removeCallbacks(it) }
        reconnectAttempts = 0
        Log.d("BleManager", "Auto-reconnect disabled")
    }
    
    private fun attemptAutoReconnect() {
        if (!_isAutoReconnectEnabled.value || lastConnectedDevice == null) {
            return
        }
        
        if (reconnectAttempts >= maxReconnectAttempts) {
            Log.w("BleManager", "Max reconnect attempts reached. Auto-reconnect stopped.")
            return
        }
        
        reconnectAttempts++
        // Ïû¨Ïó∞Í≤∞ ÎîúÎ†àÏù¥ Í≥ÑÏÇ∞ (3Ï¥à, 5Ï¥à, 10Ï¥à, 20Ï¥à, 30Ï¥à)
        val delays = arrayOf(3000L, 5000L, 10000L, 20000L, 30000L)
        val delay = delays.getOrElse(reconnectAttempts - 1) { 30000L }
        
        Log.d("BleManager", "Attempting auto-reconnect ${reconnectAttempts}/${maxReconnectAttempts} in ${delay/1000}s...")
        
        reconnectRunnable = Runnable {
            lastConnectedDevice?.let { device ->
                Log.d("BleManager", "Auto-reconnecting to ${device.name}...")
                bluetoothGatt = device.connectGatt(context, false, gattCallback)
            }
        }
        
        reconnectRunnable?.let { handler.postDelayed(it, delay) }
    }
    
    fun disconnect() {
        // ÏàòÎèô Ïó∞Í≤∞ Ìï¥Ï†ú Ïãú ÏûêÎèôÏó∞Í≤∞ ÏãúÎèÑ Ï∑®ÏÜå
        reconnectRunnable?.let { handler.removeCallbacks(it) }
        reconnectAttempts = 0
        
        bluetoothGatt?.disconnect()
        bluetoothGatt?.close()
        bluetoothGatt = null
        _isConnected.value = false
        // ÏàòÎèô Ïó∞Í≤∞ Ìï¥Ï†ú ÏãúÏóêÎèÑ Î™®Îì† ÏÑºÏÑú ÏÉÅÌÉú Î¶¨ÏÖã
        _isEegStarted.value = false
        _isPpgStarted.value = false
        _isAccStarted.value = false
        Log.d("BleManager", "Manual disconnect - all sensor states reset")
    }
    
    private fun startNotifications(gatt: BluetoothGatt) {
        Log.d("BleManager", "Connection established - ready for manual service control")
        // Î∞∞ÌÑ∞Î¶¨Îßå Ï¶âÏãú ÏùΩÍ∏∞ (ÌååÏù¥Ïç¨Í≥º ÎèôÏùº)
        val batteryChar = gatt.getService(BATTERY_SERVICE_UUID)?.getCharacteristic(BATTERY_CHAR_UUID)
        batteryChar?.let {
            Log.d("BleManager", "Reading battery characteristic")
            gatt.readCharacteristic(it)
        } ?: Log.e("BleManager", "Battery characteristic not found")
        
        // ÎÇòÎ®∏ÏßÄÎäî ÏàòÎèôÏúºÎ°ú ÏãúÏûëÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω
        // setupNotifications ÏûêÎèô Ìò∏Ï∂ú Ï†úÍ±∞
    }
    
    // EEG ÏàòÎèô ÏãúÏûë Ìï®Ïàò
    fun startEegService() {
        bluetoothGatt?.let { gatt ->
            Log.d("BleManager", "Starting EEG service manually")
            
            // 1. EEG ÏãúÏûë Î™ÖÎ†π Ï†ÑÏÜ° (Î∞îÏù¥ÎÑàÎ¶¨ Î™ÖÎ†π ÏãúÎèÑ)
            val eegWriteChar = gatt.getService(EEG_NOTIFY_SERVICE_UUID)?.getCharacteristic(EEG_WRITE_CHAR_UUID)
            eegWriteChar?.let {
                Log.d("BleManager", "Sending EEG start command (binary)")
                // Î∞îÏù¥ÎÑàÎ¶¨ Î™ÖÎ†π ÏãúÎèÑ: 0x01 = start, 0x00 = stop
                it.value = byteArrayOf(0x01)
                gatt.writeCharacteristic(it)
                
                // 2. EEG notification ÏÑ§Ï†ï (ÌååÏù¥Ïç¨Ïùò toggle_eeg_notifyÏôÄ ÎèôÏùº)
                handler.postDelayed({
                    val eegNotifyChar = gatt.getService(EEG_NOTIFY_SERVICE_UUID)?.getCharacteristic(EEG_NOTIFY_CHAR_UUID)
                    eegNotifyChar?.let { notifyChar ->
                        Log.d("BleManager", "Setting up EEG notification")
                        gatt.setCharacteristicNotification(notifyChar, true)
                        val descriptor = notifyChar.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"))
                        descriptor?.let { desc ->
                            desc.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE
                            gatt.writeDescriptor(desc)
                            _isEegStarted.value = true
                        } ?: Log.e("BleManager", "EEG descriptor not found")
                    } ?: Log.e("BleManager", "EEG notification characteristic not found")
                }, 200)
            } ?: Log.e("BleManager", "EEG write characteristic not found")
        }
    }
    
    // Î™®Îì† ÏÑºÏÑú ÎèôÏãú ÏãúÏûë Ìï®Ïàò Ï∂îÍ∞Ä
    fun startAllSensors() {
        Log.d("BleManager", "=== Î™®Îì† ÏÑºÏÑú ÎèôÏãú ÏãúÏûë ===")
        bluetoothGatt?.let { gatt ->
            // 1. EEG ÏãúÏûë
            val eegWriteChar = gatt.getService(EEG_NOTIFY_SERVICE_UUID)?.getCharacteristic(EEG_WRITE_CHAR_UUID)
            eegWriteChar?.let {
                Log.d("BleManager", "Starting EEG...")
                it.value = byteArrayOf(0x01)
                gatt.writeCharacteristic(it)
            }
            
            // 2. Î™®Îì† notification ÏÑ§Ï†ï (ÏàúÏ∞®Ï†ÅÏúºÎ°ú)
            handler.postDelayed({
                // EEG notification
                val eegNotifyChar = gatt.getService(EEG_NOTIFY_SERVICE_UUID)?.getCharacteristic(EEG_NOTIFY_CHAR_UUID)
                eegNotifyChar?.let { notifyChar ->
                    Log.d("BleManager", "Setting up EEG notification")
                    gatt.setCharacteristicNotification(notifyChar, true)
                    val descriptor = notifyChar.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"))
                    descriptor?.let { desc ->
                        desc.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE
                        gatt.writeDescriptor(desc)
                        _isEegStarted.value = true
                    }
                }
                
                // PPG notification (300ms ÌõÑ)
                handler.postDelayed({
                    val ppgChar = gatt.getService(PPG_SERVICE_UUID)?.getCharacteristic(PPG_CHAR_UUID)
                    ppgChar?.let {
                        Log.d("BleManager", "Setting up PPG notification")
                        gatt.setCharacteristicNotification(it, true)
                        val descriptor = it.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"))
                        descriptor?.let { desc ->
                            desc.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE
                            gatt.writeDescriptor(desc)
                            _isPpgStarted.value = true
                        }
                    }
                }, 300)
                
                // ACC notification (600ms ÌõÑ)
                handler.postDelayed({
                    val accChar = gatt.getService(ACCELEROMETER_SERVICE_UUID)?.getCharacteristic(ACCELEROMETER_CHAR_UUID)
                    accChar?.let {
                        Log.d("BleManager", "Setting up ACC notification")
                        gatt.setCharacteristicNotification(it, true)
                        val descriptor = it.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"))
                        descriptor?.let { desc ->
                            desc.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE
                            gatt.writeDescriptor(desc)
                            _isAccStarted.value = true
                        }
                    }
                }, 600)
                
                // Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÌôïÏù∏ (10Ï¥à ÌõÑ)
                handler.postDelayed({
                    val eegCount = _eegData.value.size
                    val ppgCount = _ppgData.value.size
                    val accCount = _accData.value.size
                    
                    Log.d("BleManager", "=== ÏÑºÏÑú Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Í≤∞Í≥º ===")
                    Log.d("BleManager", "EEG: ${eegCount}Í∞ú ÏÉòÌîå")
                    Log.d("BleManager", "PPG: ${ppgCount}Í∞ú ÏÉòÌîå")
                    Log.d("BleManager", "ACC: ${accCount}Í∞ú ÏÉòÌîå")
                    
                    if (eegCount == 0 && ppgCount == 0 && accCount == 0) {
                        Log.w("BleManager", "‚ö†Ô∏è Î™®Îì† ÏÑºÏÑúÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Ïã§Ìå®")
                        Log.w("BleManager", "ÎîîÎ∞îÏù¥Ïä§ Ï∞©Ïö© ÏÉÅÌÉúÏôÄ ÌîºÎ∂Ä Ï†ëÏ¥âÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî")
                    }
                }, 10000)
                
            }, 500)
        }
    }
    
    // PPG ÏàòÎèô ÏãúÏûë Ìï®Ïàò
    fun startPpgService() {
        Log.d("BleManager", "=== PPG ÏÑúÎπÑÏä§ ÏãúÏûë ÏöîÏ≤≠ ===")
        bluetoothGatt?.let { gatt ->
            Log.d("BleManager", "Starting PPG service manually")
            Log.d("BleManager", "Available services: ${gatt.services.map { it.uuid }}")
            
            // ÏÑúÎπÑÏä§Í∞Ä Î∞úÍ≤¨ÎêòÏßÄ ÏïäÏïòÎã§Î©¥ Îã§Ïãú Î∞úÍ≤¨ ÏãúÎèÑ
            if (gatt.services.isEmpty()) {
                Log.w("BleManager", "No services found, trying to discover services again")
                gatt.discoverServices()
                return
            }
            
            val ppgService = gatt.getService(PPG_SERVICE_UUID)
            if (ppgService == null) {
                Log.e("BleManager", "PPG service not found!")
                Log.e("BleManager", "Expected UUID: $PPG_SERVICE_UUID")
                return
            }
            
            val ppgChar = ppgService.getCharacteristic(PPG_CHAR_UUID)
            ppgChar?.let {
                Log.d("BleManager", "Found PPG characteristic: ${it.uuid}")
                Log.d("BleManager", "PPG characteristic properties: ${it.properties}")
                Log.d("BleManager", "Setting up PPG notification")
                
                val notifyResult = gatt.setCharacteristicNotification(it, true)
                Log.d("BleManager", "Set PPG notification result: $notifyResult")
                
                val descriptor = it.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"))
                descriptor?.let { desc ->
                    Log.d("BleManager", "Found PPG descriptor: ${desc.uuid}")
                    desc.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE
                    val writeResult = gatt.writeDescriptor(desc)
                    Log.d("BleManager", "Write PPG descriptor result: $writeResult")
                    
                    // PPG Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÎåÄÍ∏∞ Î°úÍ∑∏ Ï∂îÍ∞Ä
                    handler.postDelayed({
                        Log.d("BleManager", "PPG notification ÏÑ§Ï†ï ÏôÑÎ£å - Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÎåÄÍ∏∞ Ï§ë...")
                        Log.d("BleManager", "PPG ÏÑºÏÑúÍ∞Ä ÌîºÎ∂ÄÏóê ÎãøÏïÑ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî")
                        
                        // 5Ï¥à ÌõÑ Îç∞Ïù¥ÌÑ∞ ÏàòÏã† Ïó¨Î∂Ä ÌôïÏù∏
                        handler.postDelayed({
                            val ppgDataCount = _ppgData.value.size
                            if (ppgDataCount == 0) {
                                Log.w("BleManager", "‚ö†Ô∏è PPG Îç∞Ïù¥ÌÑ∞Í∞Ä ÏàòÏã†ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§")
                                Log.w("BleManager", "Í∞ÄÎä•Ìïú ÏõêÏù∏:")
                                Log.w("BleManager", "1. PPG ÏÑºÏÑúÍ∞Ä ÌîºÎ∂ÄÏóê ÎãøÏßÄ ÏïäÏùå")
                                Log.w("BleManager", "2. Îã§Î•∏ ÏÑºÏÑúÏôÄ Ìï®Íªò ÏãúÏûëÌï¥Ïïº Ìï®")
                                Log.w("BleManager", "3. ÎîîÎ∞îÏù¥Ïä§ ÌéåÏõ®Ïñ¥ Ï∞®Ïù¥")
                            } else {
                                Log.d("BleManager", "‚úÖ PPG Îç∞Ïù¥ÌÑ∞ ÏàòÏã† ÏÑ±Í≥µ: ${ppgDataCount}Í∞ú ÏÉòÌîå")
                            }
                        }, 5000)
                    }, 1000)
                    
                    _isPpgStarted.value = true
                    Log.d("BleManager", "PPG service started successfully")
                } ?: Log.e("BleManager", "PPG descriptor not found")
            } ?: Log.e("BleManager", "PPG characteristic not found")
        } ?: Log.e("BleManager", "BluetoothGatt is null - Ïó∞Í≤∞ÎêòÏßÄ ÏïäÏùå")
    }
    
    // ACC ÏàòÎèô ÏãúÏûë Ìï®Ïàò  
    fun startAccService() {
        bluetoothGatt?.let { gatt ->
            Log.d("BleManager", "Starting ACC service manually")
            val accChar = gatt.getService(ACCELEROMETER_SERVICE_UUID)?.getCharacteristic(ACCELEROMETER_CHAR_UUID)
            accChar?.let {
                Log.d("BleManager", "Setting up ACC notification")
                gatt.setCharacteristicNotification(it, true)
                val descriptor = it.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"))
                descriptor?.let { desc ->
                    desc.value = BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE
                    gatt.writeDescriptor(desc)
                    _isAccStarted.value = true
                } ?: Log.e("BleManager", "ACC descriptor not found")
            } ?: Log.e("BleManager", "ACC characteristic not found")
        }
    }
    
    // ÏÑúÎπÑÏä§ Ï§ëÏßÄ Ìï®ÏàòÎì§
    fun stopEegService() {
        bluetoothGatt?.let { gatt ->
            Log.d("BleManager", "Stopping EEG service")
            val eegNotifyChar = gatt.getService(EEG_NOTIFY_SERVICE_UUID)?.getCharacteristic(EEG_NOTIFY_CHAR_UUID)
            eegNotifyChar?.let {
                gatt.setCharacteristicNotification(it, false)
                _isEegStarted.value = false
            }
            
            val eegWriteChar = gatt.getService(EEG_NOTIFY_SERVICE_UUID)?.getCharacteristic(EEG_WRITE_CHAR_UUID)
            eegWriteChar?.let {
                it.value = "stop".toByteArray()
                gatt.writeCharacteristic(it)
            }
        }
    }
    
    fun stopPpgService() {
        bluetoothGatt?.let { gatt ->
            Log.d("BleManager", "Stopping PPG service")
            val ppgChar = gatt.getService(PPG_SERVICE_UUID)?.getCharacteristic(PPG_CHAR_UUID)
            ppgChar?.let {
                gatt.setCharacteristicNotification(it, false)
                _isPpgStarted.value = false
            }
        }
    }
    
    fun stopAccService() {
        bluetoothGatt?.let { gatt ->
            Log.d("BleManager", "Stopping ACC service")
            val accChar = gatt.getService(ACCELEROMETER_SERVICE_UUID)?.getCharacteristic(ACCELEROMETER_CHAR_UUID)
            accChar?.let {
                gatt.setCharacteristicNotification(it, false)
                _isAccStarted.value = false
            }
        }
    }
    
    private fun parseEegData(data: ByteArray) {
        Log.d("BleManager", "parseEegData called with ${data.size} bytes")
        // ÏµúÏÜå Ìó§Îçî 4Î∞îÏù¥Ìä∏ + ÏµúÏÜå 1Í∞ú ÏÉòÌîå 7Î∞îÏù¥Ìä∏ = 11Î∞îÏù¥Ìä∏
        if (data.size < 11) {
            Log.w("BleManager", "EEG data too small: ${data.size} bytes, need at least 11")
            return
        }
        
        Log.d("BleManager", "Parsing EEG data...")
        val timeRaw = (data[3].toInt() and 0xFF shl 24) or 
                     (data[2].toInt() and 0xFF shl 16) or 
                     (data[1].toInt() and 0xFF shl 8) or 
                     (data[0].toInt() and 0xFF)
        var timestamp = timeRaw / 32.768 / 1000.0
        
        val newEegData = mutableListOf<EegData>()
        
        // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞Ïóê Îî∞Îùº ÏÉòÌîå Ïàò Í≥ÑÏÇ∞
        val availableDataSize = data.size - 4
        val sampleCount = availableDataSize / 7
        Log.d("BleManager", "EEG sample count: $sampleCount")
        
        // ÏÉòÌîå ÌååÏã± (7Î∞îÏù¥Ìä∏Ïî©)
        for (i in 0 until sampleCount) {
            val offset = 4 + i * 7
            if (offset + 6 >= data.size) break
            
            val leadOff = data[offset].toInt() and 0xFF
            
            // 24bit signed Ï≤òÎ¶¨
            var ch1Raw = (data[offset+1].toInt() and 0xFF shl 16) or 
                        (data[offset+2].toInt() and 0xFF shl 8) or 
                        (data[offset+3].toInt() and 0xFF)
            var ch2Raw = (data[offset+4].toInt() and 0xFF shl 16) or 
                        (data[offset+5].toInt() and 0xFF shl 8) or 
                        (data[offset+6].toInt() and 0xFF)
            
            // 24bit signed Î≥¥Ï†ï
            if (ch1Raw and 0x800000 != 0) ch1Raw -= 0x1000000
            if (ch2Raw and 0x800000 != 0) ch2Raw -= 0x1000000
            
            // Ï†ÑÏïïÍ∞í(uV)Î°ú Î≥ÄÌôò
            val ch1Uv = ch1Raw * 4.033 / 12 / (Math.pow(2.0, 23.0) - 1) * 1e6
            val ch2Uv = ch2Raw * 4.033 / 12 / (Math.pow(2.0, 23.0) - 1) * 1e6
            
            newEegData.add(EegData(timestamp.toLong(), leadOff, ch1Uv, ch2Uv))
            timestamp += 1.0 / EEG_SAMPLE_RATE
        }
        
        if (newEegData.isNotEmpty()) {
            Log.d("BleManager", "EEG parsed successfully: ${newEegData.size} samples")
            val currentData = _eegData.value.takeLast(1000).toMutableList()
            currentData.addAll(newEegData)
            _eegData.value = currentData
            Log.d("BleManager", "EEG data updated, total samples: ${_eegData.value.size}")
        } else {
            Log.w("BleManager", "No EEG samples parsed")
        }
    }
    
    private fun parsePpgData(data: ByteArray) {
        Log.d("BleManager", "parsePpgData called with ${data.size} bytes")
        // ÏµúÏÜå Ìó§Îçî 4Î∞îÏù¥Ìä∏ + ÏµúÏÜå 1Í∞ú ÏÉòÌîå 6Î∞îÏù¥Ìä∏ = 10Î∞îÏù¥Ìä∏
        if (data.size < 10) {
            Log.w("BleManager", "PPG data too small: ${data.size} bytes, need at least 10")
            return
        }
        
        Log.d("BleManager", "Parsing PPG data...")
        val timeRaw = (data[3].toInt() and 0xFF shl 24) or 
                     (data[2].toInt() and 0xFF shl 16) or 
                     (data[1].toInt() and 0xFF shl 8) or 
                     (data[0].toInt() and 0xFF)
        var timestamp = timeRaw / 32.768 / 1000.0
        
        val newPpgData = mutableListOf<PpgData>()
        
        // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞Ïóê Îî∞Îùº ÏÉòÌîå Ïàò Í≥ÑÏÇ∞
        val availableDataSize = data.size - 4
        val sampleCount = availableDataSize / 6
        Log.d("BleManager", "PPG sample count: $sampleCount")
        
        // ÏÉòÌîå ÌååÏã± (6Î∞îÏù¥Ìä∏Ïî©)
        for (i in 0 until sampleCount) {
            val offset = 4 + i * 6
            if (offset + 5 >= data.size) break
            
            val ppgRed = (data[offset].toInt() and 0xFF shl 16) or 
                        (data[offset+1].toInt() and 0xFF shl 8) or 
                        (data[offset+2].toInt() and 0xFF)
            val ppgIr = (data[offset+3].toInt() and 0xFF shl 16) or 
                       (data[offset+4].toInt() and 0xFF shl 8) or 
                       (data[offset+5].toInt() and 0xFF)
            
            newPpgData.add(PpgData(timestamp.toLong(), ppgRed, ppgIr))
            timestamp += 1.0 / PPG_SAMPLE_RATE
        }
        
        if (newPpgData.isNotEmpty()) {
            Log.d("BleManager", "PPG parsed successfully: ${newPpgData.size} samples")
            val currentData = _ppgData.value.takeLast(500).toMutableList()
            currentData.addAll(newPpgData)
            _ppgData.value = currentData
            Log.d("BleManager", "PPG data updated, total samples: ${_ppgData.value.size}")
        } else {
            Log.w("BleManager", "No PPG samples parsed")
        }
    }
    
    private fun parseAccData(data: ByteArray) {
        // ÏµúÏÜå Ìó§Îçî 4Î∞îÏù¥Ìä∏ + ÏµúÏÜå 1Í∞ú ÏÉòÌîå 6Î∞îÏù¥Ìä∏ = 10Î∞îÏù¥Ìä∏
        if (data.size < 10) return
        
        val timeRaw = (data[3].toInt() and 0xFF shl 24) or 
                     (data[2].toInt() and 0xFF shl 16) or 
                     (data[1].toInt() and 0xFF shl 8) or 
                     (data[0].toInt() and 0xFF)
        var timestamp = timeRaw / 32.768 / 1000.0
        
        val newAccData = mutableListOf<AccData>()
        
        // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÌÅ¨Í∏∞Ïóê Îî∞Îùº ÏÉòÌîå Ïàò Í≥ÑÏÇ∞
        val availableDataSize = data.size - 4
        val sampleCount = availableDataSize / 6
        
        // ÏÉòÌîå ÌååÏã± (6Î∞îÏù¥Ìä∏Ïî©)
        for (i in 0 until sampleCount) {
            val offset = 4 + i * 6
            if (offset + 5 >= data.size) break
            
            val accX = data[offset+1].toInt() and 0xFF
            val accY = data[offset+3].toInt() and 0xFF
            val accZ = data[offset+5].toInt() and 0xFF
            
            newAccData.add(AccData(timestamp.toLong(), accX, accY, accZ))
            timestamp += 1.0 / ACC_SAMPLE_RATE
        }
        
        if (newAccData.isNotEmpty()) {
            val currentData = _accData.value.takeLast(300).toMutableList()
            currentData.addAll(newAccData)
            _accData.value = currentData
        }
    }
    
    private fun parseBatteryData(data: ByteArray) {
        if (data.isNotEmpty()) {
            val batteryLevel = data[0].toInt() and 0xFF
            _batteryData.value = BatteryData(batteryLevel)
        }
    }
} 